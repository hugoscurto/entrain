'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _wavesAudio = require('waves-audio');

var _SegmentedView = require('../views/SegmentedView');

var _SegmentedView2 = _interopRequireDefault(_SegmentedView);

var _Service2 = require('../core/Service');

var _Service3 = _interopRequireDefault(_Service2);

var _serviceManager = require('../core/serviceManager');

var _serviceManager2 = _interopRequireDefault(_serviceManager);

var _client = require('sync/client');

var _client2 = _interopRequireDefault(_client);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SERVICE_ID = 'service:sync';

/**
 * Interface for the client `'sync'` service.
 *
 * The `sync` service synchronizes the local audio clock of the client with the
 * clock of the server (master clock). It internally relies on the `WebAudio`
 * clock and then requires the `platform` service to access this feature.
 *
 * __*The service must be used with its
 * [server-side counterpart]{@link module:soundworks/server.Sync}*__
 *
 * _<span class="warning">__WARNING__</span> This class should never be
 * instanciated manually_
 *
 * _Note:_ the service is based on
 * [`github.com/collective-soundworks/sync`](https://github.com/collective-soundworks/sync).
 *
 * @memberof module:soundworks/client
 *
 * @example
 * // inside the experience constructor
 * this.sync = this.require('sync');
 * // when the experience has started, translate the sync time in local time
 * const syncTime = this.sync.getSyncTime();
 * const localTime = this.sync.getAudioTime(syncTime);
 */

var Sync = function (_Service) {
  (0, _inherits3.default)(Sync, _Service);

  function Sync() {
    (0, _classCallCheck3.default)(this, Sync);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Sync.__proto__ || (0, _getPrototypeOf2.default)(Sync)).call(this, SERVICE_ID, true));

    var defaults = {
      viewPriority: 3,
      useAudioTime: true
      // @todo - add options to configure the sync service
    };

    _this.configure(defaults);

    var getTime = _this.options.useAudioTime ? function () {
      return _wavesAudio.audioContext.currentTime;
    } : function () {
      return new Date().getTime() * 0.001;
    };

    _this._sync = new _client2.default(getTime);
    _this._ready = false;

    _this.require('platform', { features: 'web-audio' });

    _this._syncStatusReport = _this._syncStatusReport.bind(_this);
    _this._reportListeners = [];
    return _this;
  }

  /** @private */


  (0, _createClass3.default)(Sync, [{
    key: 'start',
    value: function start() {
      var _this2 = this;

      (0, _get3.default)(Sync.prototype.__proto__ || (0, _getPrototypeOf2.default)(Sync.prototype), 'start', this).call(this);
      this.show();

      var sendFunction = function sendFunction() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _this2.send.apply(_this2, ['ping'].concat(args));
      };
      var receiveFunction = function receiveFunction(callback) {
        return _this2.receive('pong', callback);
      };

      this._sync.start(sendFunction, receiveFunction, this._syncStatusReport);
    }

    /** @private */

  }, {
    key: 'stop',
    value: function stop() {
      this.hide();
      (0, _get3.default)(Sync.prototype.__proto__ || (0, _getPrototypeOf2.default)(Sync.prototype), 'stop', this).call(this);
    }

    /**
     * Return the time in the local clock. If no arguments provided,
     * returns the current local time.
     * @param {Number} syncTime - Time from the sync clock (in _seconds_).
     * @return {Number} - Local time corresponding to the given
     *  `syncTime` (in _seconds_).
     */

  }, {
    key: 'getAudioTime',
    value: function getAudioTime(syncTime) {
      return this._sync.getLocalTime(syncTime);
    }
  }, {
    key: 'getLocalTime',
    value: function getLocalTime(syncTime) {
      return this._sync.getLocalTime(syncTime);
    }

    /**
     * Return the time in the sync clock. If no arguments provided,
     * returns the current sync time.
     * @param {Number} audioTime - Time from the local clock (in _seconds_).
     * @return {Number} - Sync time corresponding to the given
     *  `audioTime` (in _seconds_).
     */

  }, {
    key: 'getSyncTime',
    value: function getSyncTime(audioTime) {
      return this._sync.getSyncTime(audioTime);
    }

    /**
     * Add a callback function to the synchronization reports from the server.
     * @param {Function} callback
     */

  }, {
    key: 'addListener',
    value: function addListener(callback) {
      this._reportListeners.push(callback);
    }
  }, {
    key: '_syncStatusReport',
    value: function _syncStatusReport(report) {
      if (report.status === 'training' || report.status === 'sync') {
        this._reportListeners.forEach(function (callback) {
          return callback(report);
        });

        if (!this._ready) {
          this._ready = true;
          this.ready();
        }
      }
    }
  }]);
  return Sync;
}(_Service3.default);

_serviceManager2.default.register(SERVICE_ID, Sync);

exports.default = Sync;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN5bmMuanMiXSwibmFtZXMiOlsiU0VSVklDRV9JRCIsIlN5bmMiLCJkZWZhdWx0cyIsInZpZXdQcmlvcml0eSIsInVzZUF1ZGlvVGltZSIsImNvbmZpZ3VyZSIsImdldFRpbWUiLCJvcHRpb25zIiwiYXVkaW9Db250ZXh0IiwiY3VycmVudFRpbWUiLCJEYXRlIiwiX3N5bmMiLCJTeW5jTW9kdWxlIiwiX3JlYWR5IiwicmVxdWlyZSIsImZlYXR1cmVzIiwiX3N5bmNTdGF0dXNSZXBvcnQiLCJiaW5kIiwiX3JlcG9ydExpc3RlbmVycyIsInNob3ciLCJzZW5kRnVuY3Rpb24iLCJhcmdzIiwic2VuZCIsInJlY2VpdmVGdW5jdGlvbiIsInJlY2VpdmUiLCJjYWxsYmFjayIsInN0YXJ0IiwiaGlkZSIsInN5bmNUaW1lIiwiZ2V0TG9jYWxUaW1lIiwiYXVkaW9UaW1lIiwiZ2V0U3luY1RpbWUiLCJwdXNoIiwicmVwb3J0Iiwic3RhdHVzIiwiZm9yRWFjaCIsInJlYWR5IiwiU2VydmljZSIsInNlcnZpY2VNYW5hZ2VyIiwicmVnaXN0ZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFNQSxhQUFhLGNBQW5COztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQXlCTUMsSTs7O0FBQ0osa0JBQWM7QUFBQTs7QUFBQSxrSUFDTkQsVUFETSxFQUNNLElBRE47O0FBR1osUUFBTUUsV0FBVztBQUNmQyxvQkFBYyxDQURDO0FBRWZDLG9CQUFjO0FBQ2Q7QUFIZSxLQUFqQjs7QUFNQSxVQUFLQyxTQUFMLENBQWVILFFBQWY7O0FBRUEsUUFBTUksVUFBVSxNQUFLQyxPQUFMLENBQWFILFlBQWIsR0FDZDtBQUFBLGFBQU1JLHlCQUFhQyxXQUFuQjtBQUFBLEtBRGMsR0FFZDtBQUFBLGFBQU8sSUFBSUMsSUFBSixHQUFXSixPQUFYLEtBQXVCLEtBQTlCO0FBQUEsS0FGRjs7QUFJQSxVQUFLSyxLQUFMLEdBQWEsSUFBSUMsZ0JBQUosQ0FBZU4sT0FBZixDQUFiO0FBQ0EsVUFBS08sTUFBTCxHQUFjLEtBQWQ7O0FBRUEsVUFBS0MsT0FBTCxDQUFhLFVBQWIsRUFBeUIsRUFBRUMsVUFBVSxXQUFaLEVBQXpCOztBQUVBLFVBQUtDLGlCQUFMLEdBQXlCLE1BQUtBLGlCQUFMLENBQXVCQyxJQUF2QixPQUF6QjtBQUNBLFVBQUtDLGdCQUFMLEdBQXdCLEVBQXhCO0FBckJZO0FBc0JiOztBQUVEOzs7Ozs0QkFDUTtBQUFBOztBQUNOO0FBQ0EsV0FBS0MsSUFBTDs7QUFFQSxVQUFNQyxlQUFlLFNBQWZBLFlBQWU7QUFBQSwwQ0FBSUMsSUFBSjtBQUFJQSxjQUFKO0FBQUE7O0FBQUEsZUFBYSxPQUFLQyxJQUFMLGdCQUFVLE1BQVYsU0FBcUJELElBQXJCLEVBQWI7QUFBQSxPQUFyQjtBQUNBLFVBQU1FLGtCQUFrQixTQUFsQkEsZUFBa0I7QUFBQSxlQUFZLE9BQUtDLE9BQUwsQ0FBYSxNQUFiLEVBQXFCQyxRQUFyQixDQUFaO0FBQUEsT0FBeEI7O0FBRUEsV0FBS2QsS0FBTCxDQUFXZSxLQUFYLENBQWlCTixZQUFqQixFQUErQkcsZUFBL0IsRUFBZ0QsS0FBS1AsaUJBQXJEO0FBQ0Q7O0FBRUQ7Ozs7MkJBQ087QUFDTCxXQUFLVyxJQUFMO0FBQ0E7QUFDRDs7QUFFRDs7Ozs7Ozs7OztpQ0FPYUMsUSxFQUFVO0FBQ3JCLGFBQU8sS0FBS2pCLEtBQUwsQ0FBV2tCLFlBQVgsQ0FBd0JELFFBQXhCLENBQVA7QUFDRDs7O2lDQUVZQSxRLEVBQVU7QUFDckIsYUFBTyxLQUFLakIsS0FBTCxDQUFXa0IsWUFBWCxDQUF3QkQsUUFBeEIsQ0FBUDtBQUNEOztBQUVEOzs7Ozs7Ozs7O2dDQU9ZRSxTLEVBQVc7QUFDckIsYUFBTyxLQUFLbkIsS0FBTCxDQUFXb0IsV0FBWCxDQUF1QkQsU0FBdkIsQ0FBUDtBQUNEOztBQUVEOzs7Ozs7O2dDQUlZTCxRLEVBQVU7QUFDcEIsV0FBS1AsZ0JBQUwsQ0FBc0JjLElBQXRCLENBQTJCUCxRQUEzQjtBQUNEOzs7c0NBRWlCUSxNLEVBQVE7QUFDeEIsVUFBSUEsT0FBT0MsTUFBUCxLQUFrQixVQUFsQixJQUFnQ0QsT0FBT0MsTUFBUCxLQUFrQixNQUF0RCxFQUE4RDtBQUM1RCxhQUFLaEIsZ0JBQUwsQ0FBc0JpQixPQUF0QixDQUE4QixVQUFDVixRQUFEO0FBQUEsaUJBQWVBLFNBQVNRLE1BQVQsQ0FBZjtBQUFBLFNBQTlCOztBQUVBLFlBQUksQ0FBQyxLQUFLcEIsTUFBVixFQUFrQjtBQUNoQixlQUFLQSxNQUFMLEdBQWMsSUFBZDtBQUNBLGVBQUt1QixLQUFMO0FBQ0Q7QUFDRjtBQUNGOzs7RUFyRmdCQyxpQjs7QUF5Rm5CQyx5QkFBZUMsUUFBZixDQUF3QnZDLFVBQXhCLEVBQW9DQyxJQUFwQzs7a0JBRWVBLEkiLCJmaWxlIjoiU3luYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGF1ZGlvQ29udGV4dCB9IGZyb20gJ3dhdmVzLWF1ZGlvJztcbmltcG9ydCBTZWdtZW50ZWRWaWV3IGZyb20gJy4uL3ZpZXdzL1NlZ21lbnRlZFZpZXcnO1xuaW1wb3J0IFNlcnZpY2UgZnJvbSAnLi4vY29yZS9TZXJ2aWNlJztcbmltcG9ydCBzZXJ2aWNlTWFuYWdlciBmcm9tICcuLi9jb3JlL3NlcnZpY2VNYW5hZ2VyJztcbmltcG9ydCBTeW5jTW9kdWxlIGZyb20gJ3N5bmMvY2xpZW50JztcblxuY29uc3QgU0VSVklDRV9JRCA9ICdzZXJ2aWNlOnN5bmMnO1xuXG4vKipcbiAqIEludGVyZmFjZSBmb3IgdGhlIGNsaWVudCBgJ3N5bmMnYCBzZXJ2aWNlLlxuICpcbiAqIFRoZSBgc3luY2Agc2VydmljZSBzeW5jaHJvbml6ZXMgdGhlIGxvY2FsIGF1ZGlvIGNsb2NrIG9mIHRoZSBjbGllbnQgd2l0aCB0aGVcbiAqIGNsb2NrIG9mIHRoZSBzZXJ2ZXIgKG1hc3RlciBjbG9jaykuIEl0IGludGVybmFsbHkgcmVsaWVzIG9uIHRoZSBgV2ViQXVkaW9gXG4gKiBjbG9jayBhbmQgdGhlbiByZXF1aXJlcyB0aGUgYHBsYXRmb3JtYCBzZXJ2aWNlIHRvIGFjY2VzcyB0aGlzIGZlYXR1cmUuXG4gKlxuICogX18qVGhlIHNlcnZpY2UgbXVzdCBiZSB1c2VkIHdpdGggaXRzXG4gKiBbc2VydmVyLXNpZGUgY291bnRlcnBhcnRde0BsaW5rIG1vZHVsZTpzb3VuZHdvcmtzL3NlcnZlci5TeW5jfSpfX1xuICpcbiAqIF88c3BhbiBjbGFzcz1cIndhcm5pbmdcIj5fX1dBUk5JTkdfXzwvc3Bhbj4gVGhpcyBjbGFzcyBzaG91bGQgbmV2ZXIgYmVcbiAqIGluc3RhbmNpYXRlZCBtYW51YWxseV9cbiAqXG4gKiBfTm90ZTpfIHRoZSBzZXJ2aWNlIGlzIGJhc2VkIG9uXG4gKiBbYGdpdGh1Yi5jb20vY29sbGVjdGl2ZS1zb3VuZHdvcmtzL3N5bmNgXShodHRwczovL2dpdGh1Yi5jb20vY29sbGVjdGl2ZS1zb3VuZHdvcmtzL3N5bmMpLlxuICpcbiAqIEBtZW1iZXJvZiBtb2R1bGU6c291bmR3b3Jrcy9jbGllbnRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gaW5zaWRlIHRoZSBleHBlcmllbmNlIGNvbnN0cnVjdG9yXG4gKiB0aGlzLnN5bmMgPSB0aGlzLnJlcXVpcmUoJ3N5bmMnKTtcbiAqIC8vIHdoZW4gdGhlIGV4cGVyaWVuY2UgaGFzIHN0YXJ0ZWQsIHRyYW5zbGF0ZSB0aGUgc3luYyB0aW1lIGluIGxvY2FsIHRpbWVcbiAqIGNvbnN0IHN5bmNUaW1lID0gdGhpcy5zeW5jLmdldFN5bmNUaW1lKCk7XG4gKiBjb25zdCBsb2NhbFRpbWUgPSB0aGlzLnN5bmMuZ2V0QXVkaW9UaW1lKHN5bmNUaW1lKTtcbiAqL1xuY2xhc3MgU3luYyBleHRlbmRzIFNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihTRVJWSUNFX0lELCB0cnVlKTtcblxuICAgIGNvbnN0IGRlZmF1bHRzID0ge1xuICAgICAgdmlld1ByaW9yaXR5OiAzLFxuICAgICAgdXNlQXVkaW9UaW1lOiB0cnVlLFxuICAgICAgLy8gQHRvZG8gLSBhZGQgb3B0aW9ucyB0byBjb25maWd1cmUgdGhlIHN5bmMgc2VydmljZVxuICAgIH07XG5cbiAgICB0aGlzLmNvbmZpZ3VyZShkZWZhdWx0cyk7XG5cbiAgICBjb25zdCBnZXRUaW1lID0gdGhpcy5vcHRpb25zLnVzZUF1ZGlvVGltZSA/XG4gICAgICAoKSA9PiBhdWRpb0NvbnRleHQuY3VycmVudFRpbWUgOlxuICAgICAgKCkgPT4gKG5ldyBEYXRlKCkuZ2V0VGltZSgpICogMC4wMDEpO1xuXG4gICAgdGhpcy5fc3luYyA9IG5ldyBTeW5jTW9kdWxlKGdldFRpbWUpO1xuICAgIHRoaXMuX3JlYWR5ID0gZmFsc2U7XG5cbiAgICB0aGlzLnJlcXVpcmUoJ3BsYXRmb3JtJywgeyBmZWF0dXJlczogJ3dlYi1hdWRpbycgfSk7XG5cbiAgICB0aGlzLl9zeW5jU3RhdHVzUmVwb3J0ID0gdGhpcy5fc3luY1N0YXR1c1JlcG9ydC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX3JlcG9ydExpc3RlbmVycyA9IFtdO1xuICB9XG5cbiAgLyoqIEBwcml2YXRlICovXG4gIHN0YXJ0KCkge1xuICAgIHN1cGVyLnN0YXJ0KCk7XG4gICAgdGhpcy5zaG93KCk7XG5cbiAgICBjb25zdCBzZW5kRnVuY3Rpb24gPSAoLi4uYXJncykgPT4gdGhpcy5zZW5kKCdwaW5nJywgLi4uYXJncyk7XG4gICAgY29uc3QgcmVjZWl2ZUZ1bmN0aW9uID0gY2FsbGJhY2sgPT4gdGhpcy5yZWNlaXZlKCdwb25nJywgY2FsbGJhY2spO1xuXG4gICAgdGhpcy5fc3luYy5zdGFydChzZW5kRnVuY3Rpb24sIHJlY2VpdmVGdW5jdGlvbiwgdGhpcy5fc3luY1N0YXR1c1JlcG9ydCk7XG4gIH1cblxuICAvKiogQHByaXZhdGUgKi9cbiAgc3RvcCgpIHtcbiAgICB0aGlzLmhpZGUoKTtcbiAgICBzdXBlci5zdG9wKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSB0aW1lIGluIHRoZSBsb2NhbCBjbG9jay4gSWYgbm8gYXJndW1lbnRzIHByb3ZpZGVkLFxuICAgKiByZXR1cm5zIHRoZSBjdXJyZW50IGxvY2FsIHRpbWUuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzeW5jVGltZSAtIFRpbWUgZnJvbSB0aGUgc3luYyBjbG9jayAoaW4gX3NlY29uZHNfKS5cbiAgICogQHJldHVybiB7TnVtYmVyfSAtIExvY2FsIHRpbWUgY29ycmVzcG9uZGluZyB0byB0aGUgZ2l2ZW5cbiAgICogIGBzeW5jVGltZWAgKGluIF9zZWNvbmRzXykuXG4gICAqL1xuICBnZXRBdWRpb1RpbWUoc3luY1RpbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fc3luYy5nZXRMb2NhbFRpbWUoc3luY1RpbWUpO1xuICB9XG5cbiAgZ2V0TG9jYWxUaW1lKHN5bmNUaW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N5bmMuZ2V0TG9jYWxUaW1lKHN5bmNUaW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIHRpbWUgaW4gdGhlIHN5bmMgY2xvY2suIElmIG5vIGFyZ3VtZW50cyBwcm92aWRlZCxcbiAgICogcmV0dXJucyB0aGUgY3VycmVudCBzeW5jIHRpbWUuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBhdWRpb1RpbWUgLSBUaW1lIGZyb20gdGhlIGxvY2FsIGNsb2NrIChpbiBfc2Vjb25kc18pLlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IC0gU3luYyB0aW1lIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGdpdmVuXG4gICAqICBgYXVkaW9UaW1lYCAoaW4gX3NlY29uZHNfKS5cbiAgICovXG4gIGdldFN5bmNUaW1lKGF1ZGlvVGltZSkge1xuICAgIHJldHVybiB0aGlzLl9zeW5jLmdldFN5bmNUaW1lKGF1ZGlvVGltZSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gdGhlIHN5bmNocm9uaXphdGlvbiByZXBvcnRzIGZyb20gdGhlIHNlcnZlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIGFkZExpc3RlbmVyKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fcmVwb3J0TGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICB9XG5cbiAgX3N5bmNTdGF0dXNSZXBvcnQocmVwb3J0KSB7XG4gICAgaWYgKHJlcG9ydC5zdGF0dXMgPT09ICd0cmFpbmluZycgfHwgcmVwb3J0LnN0YXR1cyA9PT0gJ3N5bmMnKSB7XG4gICAgICB0aGlzLl9yZXBvcnRMaXN0ZW5lcnMuZm9yRWFjaCgoY2FsbGJhY2spID0+ICBjYWxsYmFjayhyZXBvcnQpKTtcblxuICAgICAgaWYgKCF0aGlzLl9yZWFkeSkge1xuICAgICAgICB0aGlzLl9yZWFkeSA9IHRydWU7XG4gICAgICAgIHRoaXMucmVhZHkoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuXG5zZXJ2aWNlTWFuYWdlci5yZWdpc3RlcihTRVJWSUNFX0lELCBTeW5jKTtcblxuZXhwb3J0IGRlZmF1bHQgU3luYztcbiJdfQ==