'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Service2 = require('../core/Service');

var _Service3 = _interopRequireDefault(_Service2);

var _helpers = require('../../utils/helpers');

var _serviceManager = require('../core/serviceManager');

var _serviceManager2 = _interopRequireDefault(_serviceManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Slicer = require('node-audio-slicer').Slicer;


var SERVICE_ID = 'service:audio-stream-manager';

/**
 * Interface for the server `'audio-stream-manager'` service.
 *
 * This service allows to stream audio buffers to the client during the experience
 * (not preloaded). Input audio files are segmented by the server upon startup and
 * sent to the clients upon request. Service only accepts .wav files at the moment.
 * Service main objective is to 1) enable synced streaming between clients (not precise
 * if based on mediaElementSources), and 2) provide an equivalent to the mediaElementSource
 * object (streaming as a Web Audio API node) that could be plugged to any other node in Safari
 * (bypassing e.g. gain or analyzer nodes when plugged to mediaElementSource).
 *
 * __*The service should be used with its [client-side counterpart]{@link module:soundworks/client.AudioStreamManager}*__
 *
 * @param {Object} options
 * @param {Array<String>} options.audioFiles - list of paths towards would-be-streamable audio files.
 * @param {Bool} options.compress - Generate .mp3 stream chunks if set to true. Keep input file extension otherwise.
 * @param {Number} options.duration - Audio chunks duration (in sec).
 * @param {Number} options.overlap - Duration of additional audio samples added to head and tail of streamed audio
 *  buffers. Paired with a fade-in fade-out mechanism on client's side, this allows to hide distortions induced by
 *  mp3 encoding of audio chunks not starting / finishing with zeroed samples.
 *
 * @memberof module:soundworks/server
 * @example
 * // define list of "streamable" audio files
 * let audioFiles = [
 *   './public/stream/my-audio-file.wav',
 *   './public/stream/another-audio-file.wav',
 * ];
 *
 * // require service
 * this.audioStreamManager = this.require('audio-stream-manager', { audioFiles });
 */

var AudioStreamManager = function (_Service) {
  (0, _inherits3.default)(AudioStreamManager, _Service);

  /** _<span class="warning">__WARNING__</span> This class should never be instantiated manually_ */
  function AudioStreamManager() {
    (0, _classCallCheck3.default)(this, AudioStreamManager);

    var _this = (0, _possibleConstructorReturn3.default)(this, (AudioStreamManager.__proto__ || (0, _getPrototypeOf2.default)(AudioStreamManager)).call(this, SERVICE_ID));

    var defaults = {
      audioFiles: null,
      compress: true,
      duration: 4,
      overlap: 0.1
    };

    _this.configure(defaults);

    _this._sync = _this.require('sync');

    _this._clients = new _set2.default();
    return _this;
  }

  /**
   * Set common (sync) start time for AudioStream in sync mode.
   * The value is propagated to every connected clients and newly connected
   * clients.
   */


  (0, _createClass3.default)(AudioStreamManager, [{
    key: 'configure',


    /** @private */
    value: function configure(options) {
      (0, _get3.default)(AudioStreamManager.prototype.__proto__ || (0, _getPrototypeOf2.default)(AudioStreamManager.prototype), 'configure', this).call(this, options);
    }

    /** @private */

  }, {
    key: 'start',
    value: function start() {
      var _this2 = this;

      (0, _get3.default)(AudioStreamManager.prototype.__proto__ || (0, _getPrototypeOf2.default)(AudioStreamManager.prototype), 'start', this).call(this);

      if (this.options.audioFiles === null) {
        this.ready();
      } else {
        this.prepareStreamChunks(this.options.audioFiles, function (bufferInfos) {
          _this2.bufferInfos = bufferInfos;
          _this2.ready();
        });
      }
    }

    /** @private */

  }, {
    key: 'connect',
    value: function connect(client) {
      this._clients.add(client);
      this.receive(client, 'request', this._onRequest(client));
    }
  }, {
    key: 'disconnect',
    value: function disconnect(client) {
      this._clients.delete(client);
    }

    /** @private */

  }, {
    key: '_onRequest',
    value: function _onRequest(client) {
      var _this3 = this;

      return function () {
        _this3.send(client, 'acknowlegde', _this3.bufferInfos);

        // has already started in sync mode
        if (_this3._syncStartTime !== null) _this3.send(client, 'syncStartTime', _this3._syncStartTime);
      };
    }

    /**
     * Segment audio files listed into audioFiles into chunks for streaming.
     *
     * @param {Array<String>} audioFiles - list of paths towards audio files to chunk.
     * @param {Object} callback - Function to call when slicing completed.
     */

  }, {
    key: 'prepareStreamChunks',
    value: function prepareStreamChunks(audioFiles, callback) {
      var bufferInfos = [];

      var slicer = new Slicer({
        compress: this.options.compress,
        duration: this.options.duration,
        overlap: this.options.overlap
      });

      // try avoid hardcore parallel processing that crashes the server
      // (ulimit issue) when lots of audioFiles to process
      var index = 0;

      function sliceNext() {
        var item = audioFiles[index];

        slicer.slice(item, function (chunkList) {
          bufferInfos.push(chunkList);

          index += 1;

          if (index >= audioFiles.length) callback(bufferInfos);else sliceNext();
        });
      }

      sliceNext();
    }
  }, {
    key: 'syncStartTime',
    set: function set(time) {
      var _this4 = this;

      this._syncStartTime = time;

      this._clients.forEach(function (client) {
        _this4.send(client, 'syncStartTime', _this4._syncStartTime);
      });
    }
  }]);
  return AudioStreamManager;
}(_Service3.default);

_serviceManager2.default.register(SERVICE_ID, AudioStreamManager);

exports.default = AudioStreamManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,