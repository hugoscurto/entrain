'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _Signal = require('../../utils/Signal');

var _Signal2 = _interopRequireDefault(_Signal);

var _SignalAll = require('../../utils/SignalAll');

var _SignalAll2 = _interopRequireDefault(_SignalAll);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _ctors = {};
var _instances = {};

/**
 * Manager the services and their relations. Acts as a factory to ensure services
 * are instanciated only once.
 */
var serviceManager = {
  // add an init method
  /**
   *
   *
   */
  init: function init() {
    this._ready = this._ready.bind(this);

    this.signals = {};
    this.signals.start = new _Signal2.default();
    this.signals.ready = new _Signal2.default();

    this._requiredSignals = new _SignalAll2.default();
    this._requiredSignals.addObserver(this._ready);
  },
  start: function start() {
    this.signals.start.set(true);

    if (this._requiredSignals.length === 0) this._ready();
  },
  _ready: function _ready() {
    this.signals.ready.set(true);
  },


  /**
   * Retrieve a service according to the given id. If the service as not beeen
   * requested yet, it is instanciated.
   * @param {String} id - The id of the registered service
   * @param {Object} options - The options to configure the service.
   */
  require: function require(id) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    id = 'service:' + id;

    if (!_ctors[id]) throw new Error('Service "' + id + '" is not defined');

    var instance = _instances[id];

    if (!instance) {
      instance = new _ctors[id]();
      _instances[id] = instance;
    }

    instance.configure(options);
    return instance;
  },


  /**
   * Regiter a service
   * @param {String} id - The id of the service, in order to retrieve it later.
   * @param {Function} ctor - The constructor of the service.
   */
  register: function register(id, ctor) {
    _ctors[id] = ctor;
  },
  getRequiredServices: function getRequiredServices(clientType) {
    var services = [];

    for (var id in _instances) {
      if (_instances[id].clientTypes.has(clientType)) services.push(id);
    }

    return services;
  },
  getServiceList: function getServiceList() {
    return (0, _keys2.default)(_ctors);
  }
};

exports.default = serviceManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VNYW5hZ2VyLmpzIl0sIm5hbWVzIjpbIl9jdG9ycyIsIl9pbnN0YW5jZXMiLCJzZXJ2aWNlTWFuYWdlciIsImluaXQiLCJfcmVhZHkiLCJiaW5kIiwic2lnbmFscyIsInN0YXJ0IiwiU2lnbmFsIiwicmVhZHkiLCJfcmVxdWlyZWRTaWduYWxzIiwiU2lnbmFsQWxsIiwiYWRkT2JzZXJ2ZXIiLCJzZXQiLCJsZW5ndGgiLCJyZXF1aXJlIiwiaWQiLCJvcHRpb25zIiwiRXJyb3IiLCJpbnN0YW5jZSIsImNvbmZpZ3VyZSIsInJlZ2lzdGVyIiwiY3RvciIsImdldFJlcXVpcmVkU2VydmljZXMiLCJjbGllbnRUeXBlIiwic2VydmljZXMiLCJjbGllbnRUeXBlcyIsImhhcyIsInB1c2giLCJnZXRTZXJ2aWNlTGlzdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQU1BLFNBQVMsRUFBZjtBQUNBLElBQU1DLGFBQWEsRUFBbkI7O0FBRUE7Ozs7QUFJQSxJQUFNQyxpQkFBaUI7QUFDckI7QUFDQTs7OztBQUlBQyxNQU5xQixrQkFNZDtBQUNMLFNBQUtDLE1BQUwsR0FBYyxLQUFLQSxNQUFMLENBQVlDLElBQVosQ0FBaUIsSUFBakIsQ0FBZDs7QUFFQSxTQUFLQyxPQUFMLEdBQWUsRUFBZjtBQUNBLFNBQUtBLE9BQUwsQ0FBYUMsS0FBYixHQUFxQixJQUFJQyxnQkFBSixFQUFyQjtBQUNBLFNBQUtGLE9BQUwsQ0FBYUcsS0FBYixHQUFxQixJQUFJRCxnQkFBSixFQUFyQjs7QUFFQSxTQUFLRSxnQkFBTCxHQUF3QixJQUFJQyxtQkFBSixFQUF4QjtBQUNBLFNBQUtELGdCQUFMLENBQXNCRSxXQUF0QixDQUFrQyxLQUFLUixNQUF2QztBQUNELEdBZm9CO0FBaUJyQkcsT0FqQnFCLG1CQWlCYjtBQUNOLFNBQUtELE9BQUwsQ0FBYUMsS0FBYixDQUFtQk0sR0FBbkIsQ0FBdUIsSUFBdkI7O0FBRUEsUUFBSSxLQUFLSCxnQkFBTCxDQUFzQkksTUFBdEIsS0FBaUMsQ0FBckMsRUFDRSxLQUFLVixNQUFMO0FBQ0gsR0F0Qm9CO0FBd0JyQkEsUUF4QnFCLG9CQXdCWjtBQUNQLFNBQUtFLE9BQUwsQ0FBYUcsS0FBYixDQUFtQkksR0FBbkIsQ0FBdUIsSUFBdkI7QUFDRCxHQTFCb0I7OztBQTRCckI7Ozs7OztBQU1BRSxTQWxDcUIsbUJBa0NiQyxFQWxDYSxFQWtDSztBQUFBLFFBQWRDLE9BQWMsdUVBQUosRUFBSTs7QUFDeEJELFNBQUssYUFBYUEsRUFBbEI7O0FBRUEsUUFBSSxDQUFDaEIsT0FBT2dCLEVBQVAsQ0FBTCxFQUNFLE1BQU0sSUFBSUUsS0FBSixlQUFzQkYsRUFBdEIsc0JBQU47O0FBRUYsUUFBSUcsV0FBV2xCLFdBQVdlLEVBQVgsQ0FBZjs7QUFFQSxRQUFJLENBQUNHLFFBQUwsRUFBZTtBQUNiQSxpQkFBVyxJQUFJbkIsT0FBT2dCLEVBQVAsQ0FBSixFQUFYO0FBQ0FmLGlCQUFXZSxFQUFYLElBQWlCRyxRQUFqQjtBQUNEOztBQUVEQSxhQUFTQyxTQUFULENBQW1CSCxPQUFuQjtBQUNBLFdBQU9FLFFBQVA7QUFDRCxHQWpEb0I7OztBQW1EckI7Ozs7O0FBS0FFLFVBeERxQixvQkF3RFpMLEVBeERZLEVBd0RSTSxJQXhEUSxFQXdERjtBQUNqQnRCLFdBQU9nQixFQUFQLElBQWFNLElBQWI7QUFDRCxHQTFEb0I7QUE0RHJCQyxxQkE1RHFCLCtCQTREREMsVUE1REMsRUE0RFc7QUFDOUIsUUFBTUMsV0FBVyxFQUFqQjs7QUFFQSxTQUFLLElBQUlULEVBQVQsSUFBZWYsVUFBZixFQUEyQjtBQUN6QixVQUFJQSxXQUFXZSxFQUFYLEVBQWVVLFdBQWYsQ0FBMkJDLEdBQTNCLENBQStCSCxVQUEvQixDQUFKLEVBQ0VDLFNBQVNHLElBQVQsQ0FBY1osRUFBZDtBQUNIOztBQUVELFdBQU9TLFFBQVA7QUFDRCxHQXJFb0I7QUF1RXJCSSxnQkF2RXFCLDRCQXVFSjtBQUNmLFdBQU8sb0JBQVk3QixNQUFaLENBQVA7QUFDRDtBQXpFb0IsQ0FBdkI7O2tCQTRFZUUsYyIsImZpbGUiOiJzZXJ2aWNlTWFuYWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTaWduYWwgZnJvbSAnLi4vLi4vdXRpbHMvU2lnbmFsJztcbmltcG9ydCBTaWduYWxBbGwgZnJvbSAnLi4vLi4vdXRpbHMvU2lnbmFsQWxsJztcblxuY29uc3QgX2N0b3JzID0ge307XG5jb25zdCBfaW5zdGFuY2VzID0ge307XG5cbi8qKlxuICogTWFuYWdlciB0aGUgc2VydmljZXMgYW5kIHRoZWlyIHJlbGF0aW9ucy4gQWN0cyBhcyBhIGZhY3RvcnkgdG8gZW5zdXJlIHNlcnZpY2VzXG4gKiBhcmUgaW5zdGFuY2lhdGVkIG9ubHkgb25jZS5cbiAqL1xuY29uc3Qgc2VydmljZU1hbmFnZXIgPSB7XG4gIC8vIGFkZCBhbiBpbml0IG1ldGhvZFxuICAvKipcbiAgICpcbiAgICpcbiAgICovXG4gIGluaXQoKSB7XG4gICAgdGhpcy5fcmVhZHkgPSB0aGlzLl9yZWFkeS5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5zaWduYWxzID0ge307XG4gICAgdGhpcy5zaWduYWxzLnN0YXJ0ID0gbmV3IFNpZ25hbCgpO1xuICAgIHRoaXMuc2lnbmFscy5yZWFkeSA9IG5ldyBTaWduYWwoKTtcblxuICAgIHRoaXMuX3JlcXVpcmVkU2lnbmFscyA9IG5ldyBTaWduYWxBbGwoKTtcbiAgICB0aGlzLl9yZXF1aXJlZFNpZ25hbHMuYWRkT2JzZXJ2ZXIodGhpcy5fcmVhZHkpO1xuICB9LFxuXG4gIHN0YXJ0KCkge1xuICAgIHRoaXMuc2lnbmFscy5zdGFydC5zZXQodHJ1ZSk7XG5cbiAgICBpZiAodGhpcy5fcmVxdWlyZWRTaWduYWxzLmxlbmd0aCA9PT0gMClcbiAgICAgIHRoaXMuX3JlYWR5KCk7XG4gIH0sXG5cbiAgX3JlYWR5KCkge1xuICAgIHRoaXMuc2lnbmFscy5yZWFkeS5zZXQodHJ1ZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIGEgc2VydmljZSBhY2NvcmRpbmcgdG8gdGhlIGdpdmVuIGlkLiBJZiB0aGUgc2VydmljZSBhcyBub3QgYmVlZW5cbiAgICogcmVxdWVzdGVkIHlldCwgaXQgaXMgaW5zdGFuY2lhdGVkLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgLSBUaGUgaWQgb2YgdGhlIHJlZ2lzdGVyZWQgc2VydmljZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIHRvIGNvbmZpZ3VyZSB0aGUgc2VydmljZS5cbiAgICovXG4gIHJlcXVpcmUoaWQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGlkID0gJ3NlcnZpY2U6JyArIGlkO1xuXG4gICAgaWYgKCFfY3RvcnNbaWRdKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBTZXJ2aWNlIFwiJHtpZH1cIiBpcyBub3QgZGVmaW5lZGApO1xuXG4gICAgbGV0IGluc3RhbmNlID0gX2luc3RhbmNlc1tpZF07XG5cbiAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICBpbnN0YW5jZSA9IG5ldyBfY3RvcnNbaWRdO1xuICAgICAgX2luc3RhbmNlc1tpZF0gPSBpbnN0YW5jZTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5jb25maWd1cmUob3B0aW9ucyk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWdpdGVyIGEgc2VydmljZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgLSBUaGUgaWQgb2YgdGhlIHNlcnZpY2UsIGluIG9yZGVyIHRvIHJldHJpZXZlIGl0IGxhdGVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdG9yIC0gVGhlIGNvbnN0cnVjdG9yIG9mIHRoZSBzZXJ2aWNlLlxuICAgKi9cbiAgcmVnaXN0ZXIoaWQsIGN0b3IpIHtcbiAgICBfY3RvcnNbaWRdID0gY3RvcjtcbiAgfSxcblxuICBnZXRSZXF1aXJlZFNlcnZpY2VzKGNsaWVudFR5cGUpIHtcbiAgICBjb25zdCBzZXJ2aWNlcyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaWQgaW4gX2luc3RhbmNlcykge1xuICAgICAgaWYgKF9pbnN0YW5jZXNbaWRdLmNsaWVudFR5cGVzLmhhcyhjbGllbnRUeXBlKSlcbiAgICAgICAgc2VydmljZXMucHVzaChpZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlcnZpY2VzO1xuICB9LFxuXG4gIGdldFNlcnZpY2VMaXN0KCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhfY3RvcnMpO1xuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgc2VydmljZU1hbmFnZXI7XG4iXX0=