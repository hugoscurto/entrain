#!/usr/bin/env node
var fse = require('fs-extra');
var watch = require('watch');
var path = require('path');
var pkg = require('../package.json');
var util = require('util');
var sass = require('node-sass');

var javascripts = require('./javascripts');
var log = require('./log');
var cwd = process.cwd();

'use strict';

/**
 * Options for babel transpiling.
 */
var babelrc = fse.readFileSync(path.join(cwd, '.babelrc'));
var babelOptions = JSON.parse(babelrc);

/**
 * Options for watch.
 */
var watchOptions = {
  ignoreDotFiles: true,
  ignoreUnreadableDir: true,
  ignoreNotPermitted: true,
  interval: 2, // watch internally use `fs.watchFile`
};

/**
 * Options for browserify.
 */
var browserifyOptions = {
  debug: true,
  fullPaths: false,
  standalone: pkg.standalone,
};

/**
 * Watched directories
 */
var srcDirectory = path.join(cwd, 'src');
var distDirectory = path.join(cwd, 'dist');

// transpile css file to js string
var sassSrcFile = 'styles.scss';
var sassSrcDir = path.join(srcDirectory, 'sass');
var sassEntryPoint = path.join(sassSrcDir, sassSrcFile);
var cssDistDir = path.join(distDirectory, 'utils');
var cssDistFile = path.join(cssDistDir, 'styles-declarations.js');

/**
 * Define which file should be ignored by every command.
 */
var allowedExtentions = /\.scss$|\.js$/;
var jsExtention = /\.js$/;
var sassExtention = /\.scss$/;
var excludeFiles = /^\./; // exclude hidden files

/**
 * Test the given filename, to ensure it can be processed by any command / tranpsiler
 * @param {String} filename - The filename to be checked.
 * @param {Boolean} [ensureFile=true] - If set to false, don't test if the file exists.
 */
function isAllowed(filename, ensureFile) {
  ensureFile = ensureFile === undefined ? true : ensureFile;

  var basename = path.basename(filename);
  var isFile = true;

  if (ensureFile) {
    try {
      isFile = fse.lstatSync(filename).isFile() && !fse.lstatSync(filename).isSymbolicLink();
    } catch(e) {
      console.log(e.message);
      isFile = false;
    }
  }

  var hasAllowedExt = allowedExtentions.test(basename);
  var notExcludeFile = !excludeFiles.test(basename);

  return isFile && hasAllowedExt && notExcludeFile;
}

function isSass(filename) {
  return sassExtention.test(filename);
}

function isJs(filename) {
  return jsExtention.test(filename);
}

/**
 * Returns a list of the file in a given folder recursively.
 */
function _getJsFileList(folder, callback) {
  var files = [];

  fse.walk(folder)
    .on('data', function(item) {
      if (item.stats.isFile() && isAllowed(item.path) && isJs(item.path))
        files.push(item.path);
    })
    .on('end', function() {
      callback(files);
    });
}

/**
 * Watch javascript source files.
 */
function watchFiles(srcDirectory, distDirectory, sassEntryPoint, cssDistFile) {
  watch.createMonitor(srcDirectory, watchOptions, function(monitor) {
    var transpiler = javascripts.getTranspiler(srcDirectory, distDirectory, isAllowed, babelOptions);

    monitor.on('created', function(filename, stats) {
      if (isAllowed(filename)) {
        if (isSass(filename))
          transpileCss(sassEntryPoint, cssDistFile);
        else
          transpiler.transpile(filename, []);
      }
    });

    monitor.on('changed', function(filename, stats) {
      if (isAllowed(filename)) {
        if (isSass(filename))
          transpileCss(sassEntryPoint, cssDistFile);
        else
          transpiler.transpile(filename, []);
      }
    });

    monitor.on('removed', function(filename, stats) {
      if (isAllowed(filename, false))
        transpiler.delete(filename);
    });
  });
}

function transpileJsFiles(srcDirectory, distDirectory, callback) {
  _getJsFileList(srcDirectory, function(files) {
    var transpiler = javascripts.getTranspiler(srcDirectory, distDirectory, isAllowed, babelOptions);
    transpiler.transpile(undefined, files, callback);
  });
}

function transpileCss(src, target) {
  var startTime = new Date().getTime();

  fse.readFile(src, 'utf8', function(err, res) {
    if (err) { return console.log(err.message); }

    res = sass.render({ data: res }, function(err, res) {
      if (err) {
        log.transpileError(err);
        return;
      }

      res = res.css.toString();

      // replace `_prefix_` keyword in css file with `package.name`
      res = res.replace(/_prefix_/gm, '.' + pkg.name);
      // remove comments - http://upshots.org/javascript/javascript-regexp-to-remove-comments
      res = res.replace(/(\/\*([\s\S]*?)\*\/)|(\/\/(.*)$)/gm, ''); // not so reliable
      // // clean white spaces
      res = res.replace(/[\s]+/gm, ' ');
      // prepare for js file
      res = 'module.exports = "' + res.replace(/\n/gm, ' ') + '";';

      fse.outputFile(target, res, function(err, res) {
        if (err) { return console.log(err.message); }

        log.transpileSuccess(src, target, startTime);
      });
    });
  });
}


/* --------------------------------------------------------------------------
 * Process and execute the given command.
 * -------------------------------------------------------------------------- */

var command = process.argv[2];
var args = process.argv.slice(3);
var argv = {};
for (var i = 0; i < args.length; i += 2) {
  argv[args[i]] = args[i + 1];
}

switch (command) {
  /**
   * Watch the file system and transpile from es6 to es5.
   */
  case '--watch':
    watchFiles(srcDirectory, distDirectory, sassEntryPoint, cssDistFile);
    break;

  /**
   * Transpile all files in `src` from es6 to es5.
   */
  case '--transpile':
    transpileJsFiles(srcDirectory, distDirectory);
    transpileCss(sassEntryPoint, cssDistFile);
    break;
}

/* --------------------------------------------------------------------------
 * -------------------------------------------------------------------------- */

